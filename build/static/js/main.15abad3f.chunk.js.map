{"version":3,"sources":["Components/Button.js","Components/Stopwatch.js","Components/SplitTimeList.js","App.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","button","_templateObject","Button","_ref","children","attrs","Object","objectWithoutProperties","react_default","a","createElement","StyledStopwatch","div","Stopwatch_templateObject","Time","h2","_templateObject2","Stopwatch","addToSplitTimes","clearSplitTimes","_useState","useState","_useState2","slicedToArray","time","setTime","_useState3","_useState4","start","setStart","useEffect","timerID","setInterval","clearInterval","formattedTime","date","Date","setMilliseconds","toISOString","substring","Components_Button","onClick","Wrapper","SplitTimeList_templateObject","List","ul","SplitTimeList_templateObject2","Item","li","_templateObject3","SplitTimeList","items","map","item","index","key","concat","App","splitTimes","setSplitTimes","className","Components_Stopwatch","Components_SplitTimeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"igBAGA,IAAMA,EAAeC,IAAOC,OAAVC,KAeHC,EAJA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAaC,EAAhBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,qBACbK,EAAAC,EAAAC,cAACZ,EAAiBO,EAAQD,8LCT5B,IAAMO,EAAkBZ,IAAOa,IAAVC,KAKfC,EAAOf,IAAOgB,GAAVC,KAsDKC,EApDG,SAAAd,GAA0C,IAAvCe,EAAuCf,EAAvCe,gBAAiBC,EAAsBhB,EAAtBgB,gBAAsBC,EAClCC,mBAAS,GADyBC,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAAc,EAAA,GACnDI,EADmDF,EAAA,GAC7CG,EAD6CH,EAAA,GAAAI,EAEhCL,oBAAS,GAFuBM,EAAArB,OAAAiB,EAAA,EAAAjB,CAAAoB,EAAA,GAEnDE,EAFmDD,EAAA,GAE5CE,EAF4CF,EAAA,GAI1DG,oBAAU,WACR,GAAIF,EAAO,CACT,IAAIG,EAAUC,YAAY,WACxBP,EAAQD,EAAO,IACd,IAEH,OAAO,WACLS,cAAcF,OAKpB,IAAMG,EAAgB,WACpB,IAAIC,EAAO,IAAIC,KAAK,MAIpB,OAFAD,EAAKE,gBAAuB,GAAPb,GAEdW,EAAKG,cAAcC,UAAU,GAAI,KAG1C,OACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACI,EAAD,KAAOoB,MAET1B,EAAAC,EAAAC,cAAC8B,EAAD,CAAQC,QAAS,kBAAMZ,GAAUD,KAC9BA,EAAQ,OAAS,SAEpBpB,EAAAC,EAAAC,cAAC8B,EAAD,CACEC,QAAS,WACFb,IACHH,EAAQ,GACRN,OAJN,SAUAX,EAAAC,EAAAC,cAAC8B,EAAD,CAAQC,QAAS,kBAAMb,GAASV,EAAgBgB,OAAhD,2fCnDN,IAAMQ,EAAU3C,IAAOa,IAAV+B,KAMPC,EAAO7C,IAAO8C,GAAVC,KAWJC,EAAOhD,IAAOiD,GAAVC,KAuBKC,EAjBO,SAAA/C,GAAe,IAAZgD,EAAYhD,EAAZgD,MACvB,OACE3C,EAAAC,EAAAC,cAACgC,EAAD,KACElC,EAAAC,EAAAC,cAACkC,EAAD,KACGO,GACCA,EAAMC,IAAI,SAACC,EAAMC,GAAP,OACR9C,EAAAC,EAAAC,cAACqC,EAAD,CAAMQ,IAAG,GAAAC,OAAKF,EAAL,KAAAE,OAAcH,IAASA,QCX7BI,EAlBH,WAAM,IAAArC,EACoBC,mBAAS,IAD7BC,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAAc,EAAA,GACTsC,EADSpC,EAAA,GACGqC,EADHrC,EAAA,GAGhB,OACEd,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,OACbpD,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACmD,EAAD,CACE3C,gBAAiB,SAAAM,GAGfmC,EAAc,CAACnC,GAAMgC,OAFPE,KAIhBvC,gBAAiB,kBAAMwC,EAAc,OAEvCnD,EAAAC,EAAAC,cAACoD,EAAD,CAAeX,MAAOO,MCNRK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15abad3f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.button`\r\n  padding: 0.25rem 1.25rem;\r\n  margin: 0.5rem;\r\n  background-color: transparent;\r\n  color: mediumturquoise;\r\n  border: 3px solid mediumturquoise;\r\n  border-radius: 0.25rem;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Button = ({ children, ...attrs }) => (\r\n  <StyledButton {...attrs}>{children}</StyledButton>\r\n);\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { func } from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"./Button\";\r\n\r\nconst StyledStopwatch = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Time = styled.h2``;\r\n\r\nconst Stopwatch = ({ addToSplitTimes, clearSplitTimes }) => {\r\n  const [time, setTime] = useState(0);\r\n  const [start, setStart] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (start) {\r\n      let timerID = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 10);\r\n\r\n      return function cleanup() {\r\n        clearInterval(timerID);\r\n      };\r\n    }\r\n  });\r\n\r\n  const formattedTime = () => {\r\n    let date = new Date(null);\r\n\r\n    date.setMilliseconds(time * 10);\r\n\r\n    return date.toISOString().substring(14, 21);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <StyledStopwatch>\r\n        <Time>{formattedTime()}</Time>\r\n      </StyledStopwatch>\r\n      <Button onClick={() => setStart(!start)}>\r\n        {start ? \"Stop\" : \"Start\"}\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          if (!start) {\r\n            setTime(0);\r\n            clearSplitTimes();\r\n          }\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n      <Button onClick={() => start && addToSplitTimes(formattedTime())}>\r\n        Split\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\nStopwatch.propTypes = {\r\n  addToSplitTimes: func,\r\n  clearSplitTimes: func\r\n};\r\nexport default Stopwatch;\r\n","import React from \"react\";\r\nimport { array } from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst List = styled.ul`\r\n  position: relative;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  list-style: none;\r\n  max-height: 325px;\r\n  max-width: 100vw;\r\n  padding: 0;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n  padding: 0.1rem 0.25rem;\r\n`;\r\n\r\nconst SplitTimeList = ({ items }) => {\r\n  return (\r\n    <Wrapper>\r\n      <List>\r\n        {items &&\r\n          items.map((item, index) => (\r\n            <Item key={`${index}-${item}`}>{item}</Item>\r\n          ))}\r\n      </List>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nSplitTimeList.propTypes = {\r\n  items: array.isRequired\r\n};\r\n\r\nexport default SplitTimeList;\r\n","import React, { useState } from \"react\";\nimport Stopwatch from \"./Components/Stopwatch\";\nimport SplitTimeList from \"./Components/SplitTimeList\";\n\nconst App = () => {\n  const [splitTimes, setSplitTimes] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <h1>It's a Stopwatch</h1>\n      <Stopwatch\n        addToSplitTimes={time => {\n          let newList = splitTimes;\n\n          setSplitTimes([time].concat(newList));\n        }}\n        clearSplitTimes={() => setSplitTimes([])}\n      />\n      <SplitTimeList items={splitTimes} />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}